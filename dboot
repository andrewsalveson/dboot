#!/bin/bash

# temporarily move into dboot folder
OLDWD=$(pwd)
cd ~/dboot


# text colors
RED="\033[91m"
GRN="\033[92m"
NRM="\033[0m"

# build temp and log (replay) script
TMP=~/dboot/tmp
mkdir -p $TMP
LOG=$TMP/log.sh
if [ -f $LOG ]; then
  rm $LOG
fi
echo "#!/bin/bash" >> $LOG
chmod +x $LOG
VERBOSE=false

# parse flags
while getopts ":v" opt; do
  case ${opt} in
    v ) VERBOSE=true
      ;;
    \? ) echo "Usage: ./dboot [-v]"
      exit 1
      ;;
  esac
done

function log {
  LINE="#$1"
  if [ "$VERBOSE" = true ]; then
    echo -e $LINE
  fi
  echo $LINE >> $LOG
}

function pass {
  log "${GRN}$1${NRM}"
}

function fail {
  log "${RED}$1${NRM}"
}

function com {
  log "executing command"
  echo "$1" >> $LOG
  echo "$1"
  $1
}

log "OS: $OSTYPE"
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  source ./dboot-linux-gnu
elif [[ "$OSTYPE" == "darwin"* ]]; then
  source ./dboot-macos
elif [[ "$OSTYPE" == "cygwin" ]]; then
  fail "no scripts for cygwin"
elif [[ "$OSTYPE" == "msys" ]]; then
  fail "no scripts for msys"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
  fail "no scripts for freebsd"
else
  fail "unknown OS"
fi

# log "check for new version"
# DBHASH=$(openssl dgst -sha256 ./dboot)
# com "git pull origin master"
# NEWDBHASH=$(openssl dgst -sha256 ./dboot)
# if [ "$DBHASH" = "$NEWDBHASH" ]; then
#   pass "no updates"
# else
#   log "pulled dboot is different; running..."
#   com "./dboot"
#   exit 0
# fi

source ./install

pass "dboot complete"

# return to original working directory
cd $OLDWD

